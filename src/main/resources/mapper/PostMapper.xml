<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.p4th.backend.mapper.PostMapper">

    <resultMap id="PostResultMap" type="com.p4th.backend.domain.Post">
        <!-- Post 칼럼 매핑 -->
        <id property="postId" column="postId" />
        <result property="boardId" column="boardId"/>
        <result property="userId" column="userId"/>
        <result property="title" column="title"/>
        <result property="content" column="content"/>
        <result property="pinnedYn" column="pinnedYn"/>
        <result property="status" column="status"/>
        <result property="statusChangedAt" column="statusChangedAt"/>
        <result property="viewCount" column="viewCount"/>
        <result property="commentCount" column="commentCount"/>
        <result property="createdBy" column="createdBy"/>
        <result property="createdAt" column="createdAt"/>
        <result property="updatedBy" column="updatedBy"/>
        <result property="updatedAt" column="updatedAt"/>
        <association property="board" javaType="com.p4th.backend.domain.Board">
            <id property="boardId" column="b_boardId"/>
            <result property="boardName" column="b_boardName"/>
            <result property="categoryId" column="b_categoryId"/>
            <result property="categoryName" column="c_categoryName"/>
        </association>
    </resultMap>

    <!-- 게시판별 게시글 개수 조회 -->
    <select id="countPostsByBoard" resultType="int">
        SELECT COUNT(*)
        FROM post
        WHERE board_id = #{boardId}
    </select>

    <!-- 게시글 상세 조회 (작성자 닉네임 포함) -->
    <select id="getPostDetail" resultMap="PostResultMap" parameterType="String">
        SELECT
            p.post_id AS postId,
            p.board_id AS boardId,
            p.user_id AS userId,
            u.nickname AS nickname,
            p.title AS title,
            p.content AS content,
            p.pinned_yn AS pinnedYn,
            p.status AS status,
            p.status_changed_at AS statusChangedAt,
            p.view_count AS viewCount,
            p.comment_count AS commentCount,
            p.created_at AS createdAt,
            p.created_by AS createdBy,
            p.updated_at AS updatedAt,
            p.updated_by AS updatedBy,
            b.board_name AS b_boardName,
            b.category_id AS b_categoryId,
            c.category_name AS c_categoryName
        FROM post p
                 LEFT JOIN user_info u ON p.user_id = u.user_id
                 LEFT JOIN board b ON p.board_id = b.board_id
                 LEFT JOIN category c ON b.category_id = c.category_id
        WHERE p.post_id = #{postId}
    </select>

    <!-- 게시글 등록 -->
    <insert id="insertPost">
        INSERT INTO post
        (
            post_id,
            board_id,
            user_id,
            title,
            content,
            created_by
        )
        VALUES
            (
                #{postId},
                #{boardId},
                #{userId},
                #{title},
                #{content},
                #{userId}
            )
    </insert>

    <!-- 게시글 수정 -->
    <update id="updatePost">
        UPDATE post
        SET
            board_id = #{boardId},
            title = #{title},
            content = #{content},
            updated_by = #{userId}
        WHERE post_id = #{postId}
    </update>

    <!-- 물리 삭제: 댓글이 없는 게시글에 대해 실제 삭제 -->
    <delete id="physicalDeletePost">
        DELETE FROM post
        WHERE post_id = #{postId}
    </delete>

    <!-- 상태 업데이트: 댓글이 있는 게시글은 상태를 DELETED로 업데이트 -->
    <update id="deletePost">
        UPDATE post
        SET status = 'DELETED',
            status_changed_at = NOW()
        WHERE post_id = #{postId}
    </update>

    <!-- 게시글 상세 조회 시 조회수 1증가 -->
    <update id="incrementViewCount">
        UPDATE post
        SET view_count = view_count + 1
        WHERE post_id = #{postId}
    </update>

    <!-- 인기 게시글 조회 -->
    <select id="getPopularPosts" resultType="com.p4th.backend.dto.response.post.PopularPostResponse">
        SELECT
            p.post_id AS postId,
            p.board_id AS boardId,
            p.user_id AS userId,
            u.nickname AS nickname,
            p.title AS title,
            p.status AS status,
            c.category_name AS category,
            b.board_name AS boardName,
            p.view_count AS viewCount,
            p.comment_count AS commentCount,
            p.created_at AS createdAt
        FROM post p
                 LEFT JOIN user_info u ON p.user_id = u.user_id
                 LEFT JOIN board b ON p.board_id = b.board_id
                 LEFT JOIN category c ON b.category_id = c.category_id
        WHERE p.status = 'NORMAL'
        ORDER BY (p.view_count * 0.4 + p.comment_count * 0.2) DESC
        LIMIT 20
    </select>

    <!-- 전체 게시글 조회 -->
    <select id="getAllPosts" resultType="com.p4th.backend.domain.Post">
        SELECT
            post_id,
            board_id,
            user_id,
            title,
            content,
            view_count,
            comment_count,
            created_at
        FROM post
    </select>

    <!-- 댓글 수 증가 -->
    <update id="incrementCommentCount">
        UPDATE post
        SET comment_count = comment_count + 1
        WHERE post_id = #{postId}
    </update>

    <!-- 댓글 수 감소 -->
    <update id="decrementCommentCount">
        UPDATE post
        SET comment_count = comment_count - 1
        WHERE post_id = #{postId}
    </update>

    <select id="findRecentPostsByUserId" resultMap="PostResultMap" parameterType="String">
        SELECT
            p.post_id        AS postId,
            p.board_id       AS boardId,
            p.user_id        AS userId,
            p.title          AS title,
            p.content        AS content,
            p.pinned_yn      AS pinnedYn,
            p.status         AS status,
            p.status_changed_at AS statusChangedAt,
            p.view_count     AS viewCount,
            p.comment_count  AS commentCount,
            p.created_by     AS createdBy,
            p.created_at     AS createdAt,
            p.updated_by     AS updatedBy,
            p.updated_at     AS updatedAt,
            b.board_id       AS b_boardId,
            b.board_name     AS b_boardName,
            b.category_id    AS b_categoryId,
            c.category_id    AS c_categoryId,
            c.category_name  AS c_categoryName
        FROM post_view pv
                 JOIN post p ON pv.post_id = p.post_id
                 LEFT JOIN board b ON p.board_id = b.board_id
                 LEFT JOIN category c ON b.category_id = c.category_id
        WHERE pv.user_id = #{userId}
        ORDER BY pv.viewed_at DESC
        LIMIT 15
    </select>

    <insert id="insertPostView">
        INSERT INTO post_view (user_id, post_id, viewed_at)
        VALUES (#{userId}, #{postId}, NOW())
        ON DUPLICATE KEY UPDATE viewed_at = NOW()
    </insert>

</mapper>
